buildscript {
    dependencies {
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.16'
    id 'io.spring.dependency-management' version '1.1.3' // 종속성관리를 위한 Gradle 플러그인
    id 'java'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

// Used by "com.gorylenko.gradle-git-properties" plugin
gitProperties {
    keys = ['git.branch', 'git.commit.id', 'git.commit.time']
}

springBoot {
    buildInfo()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

group = 'dev.pinner'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // 모니터링
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // 애플리케이션의 지표를 제공
    implementation 'io.micrometer:micrometer-registry-prometheus' // 제공된 지표들을 DB에 저장하고 이를 활용한 편의 기능을 제공
    
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.1.4'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.querydsl:querydsl-jpa'
    implementation 'com.querydsl:querydsl-apt'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
    implementation 'org.imgscalr:imgscalr-lib:4.2'
    runtimeOnly 'com.h2database:h2:1.4.200'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}


apply plugin: "com.ewerk.gradle.plugins.querydsl"

def querydslDir = "$buildDir/generated/querydsl"

bootJar {
    archiveBaseName = 'pinner-be'
    archiveFileName = 'pinner-be.jar'
    archiveVersion = "0.0.1"
}

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslDir]
        }
    }
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}